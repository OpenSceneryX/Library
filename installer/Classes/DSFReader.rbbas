#tag ClassProtected Class DSFReader	#tag Method, Flags = &h0		Sub clear()		  redim pOSXObjectPaths(-1)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(folderItem as FolderItem)		  pFolderItem = folderItem		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function getPaths() As String()		  return pOSXObjectPaths		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function load() As integer		  dim binaryStream as BinaryStream		  dim header as String		  dim version as Integer		  dim atomID as Integer		  dim atomLength as Integer		  dim contents as String		  dim i as integer		  		  if (pFolderItem) = nil then return kResultInvalidFolderItem		  		  binaryStream = BinaryStream.Open(pFolderItem, false)		  binaryStream.littleEndian = true		  		  header = binaryStream.read(8)		  if (header <> kHeader) then return kResultNotDSF		  		  version = binaryStream.readInt32()		  if (version <> 1) then return kResultVersionTooNew		  		  while not binaryStream.EOF		    atomID = binaryStream.readInt32()		    atomLength = binaryStream.readInt32()		    		    if (atomID <> kAtomIDDefinitions) then		      // Not an atom we're interested in, continue to next atom		      contents = binaryStream.read(atomLength - 8)		    else		      // Found a DEFN atom, look for OBJT definitions within it		      while not binaryStream.EOF		        atomID = binaryStream.readInt32()		        atomLength = binaryStream.readInt32()		        		        if (atomID <> kAtomIDObjects) then		          // Not an atom we're interested in, continue to next atom		          contents = binaryStream.read(atomLength - 8)		        else		          // Found an OBJT atom, parse the contents		          contents = binaryStream.read(atomLength - 8)		          dim objects() as String = contents.splitB(chrB(0))		          		          for i = 0 to ubound(objects)		            if (left(objects(i), 13) = "opensceneryx/") then		              pOSXObjectPaths.append(right(objects(i), len(objects(i)) - 12))		            end if		          next		          		          // No need to continue, we've found what we need		          goto terminate		        end if		      wend		    end if		  wend		  		  terminate:		  binaryStream.close()		  		  return kResultSuccess		  		End Function	#tag EndMethod	#tag Property, Flags = &h21		Private pFolderItem As FolderItem	#tag EndProperty	#tag Property, Flags = &h21		Private pOSXObjectPaths() As String	#tag EndProperty	#tag Constant, Name = kAtomIDDefinitions, Type = Double, Dynamic = False, Default = \"1145390670", Scope = Private	#tag EndConstant	#tag Constant, Name = kAtomIDObjects, Type = Double, Dynamic = False, Default = \"1329744468", Scope = Private	#tag EndConstant	#tag Constant, Name = kHeader, Type = String, Dynamic = False, Default = \"XPLNEDSF", Scope = Private	#tag EndConstant	#tag Constant, Name = kResultInvalidFolderItem, Type = Double, Dynamic = False, Default = \"-2", Scope = Public	#tag EndConstant	#tag Constant, Name = kResultNotDSF, Type = Double, Dynamic = False, Default = \"-1", Scope = Public	#tag EndConstant	#tag Constant, Name = kResultSuccess, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = kResultVersionTooNew, Type = Double, Dynamic = False, Default = \"-3", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass