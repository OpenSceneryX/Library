#tag ClassProtected Class FileWriterImplements SeqDataOutputStream	#tag Method, Flags = &h0		Sub FileWriter(f as FolderItem)		  // Constructor.		  // Pass a FolderItem to designate the file the stream should write to		  		  me.f = f		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Write(data As String) As Boolean		  if me.bs = nil then		    raise new RuntimeException // did you forget to call Open()?		  end		  me.written = me.written + LenB(data)		  me.bs.Write data		  return true		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Open() As Boolean		  if me.bs <> nil then		    return true		  end		  if not f.exists then		    me.bs = f.CreateBinaryFile("")		  else		    me.bs = f.OpenAsBinaryFile(true)		  end		  if me.bs <> nil then		    me.bs.Length = 0		  end		  me.error = (me.bs = nil) or (me.bs.Length <> 0)		  return not me.error		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Close() As Boolean		  if me.bs = nil then		    return true		  end		  if me.bs.Length <> me.written then		    me.error = true		  end		  me.bs.Close		  me.bs = nil		  return not me.error		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub GetErrorDescription(ByRef code As Integer, ByRef msg As String)		  if me.error then		    code = -1		    msg = "open or write error"		  else		    code = 0		    msg = ""		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Skip(count As Integer) As Boolean		  if me.bs = nil then		    raise new RuntimeException // did you forget to call Open()?		  end		  me.written = me.written + count		  if me.bs.Length < me.written then		    me.bs.Length = me.written		  end		  return true		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ClearError()		  me.error = false		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Flush() As Boolean		  if me.bs = nil then		    raise new RuntimeException // did you forget to call Open()?		  end		  if me.bs.Length <> me.written then		    me.error = true		  end		  return not me.error		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ~FileWriter()		  if me.Close then		  end		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected f As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		Protected error As Boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected bs As BinaryStream	#tag EndProperty	#tag Property, Flags = &h1		Protected written As Integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass