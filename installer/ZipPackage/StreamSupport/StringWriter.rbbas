#tag ClassProtected Class StringWriterImplements SeqDataOutputStream	#tag Method, Flags = &h0		Sub ClearError()		  me.error = false		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Close() As Boolean		  if me.bs = nil then		    return true		  end		  if me.bs.Length <> me.written then		    me.error = true		  end		  me.bs.Close		  me.bs = nil		  return not me.error		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  // Constructor.		  		  me.buffer = new MemoryBlock(0)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Destructor()		  call me.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Flush() As Boolean		  if me.bs = nil then		    raise new RuntimeException // did you forget to call Open()?		  end		  bs.Flush		  if me.bs.Length <> me.written then		    me.error = true		  end		  return not me.error		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub GetErrorDescription(ByRef code As Integer, ByRef msg As String)		  if me.error then		    code = -1		    msg = "open or write error"		  else		    code = 0		    msg = ""		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Open() As Boolean		  if me.bs <> nil then		    return true		  end		  me.bs = new BinaryStream(me.buffer)		  if me.bs <> nil then		    me.bs.Length = 0		  end		  me.error = (me.bs = nil) or (me.bs.Length > 0)		  return not me.error		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Skip(count As UInt64) As Boolean		  if me.bs = nil then		    raise new RuntimeException // did you forget to call Open()?		  end		  me.written = me.written + count		  if me.bs.Length < me.written then		    me.bs.Length = me.written		  end		  return true		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Write(data As String) As Boolean		  if me.bs = nil then		    raise new RuntimeException // did you forget to call Open()?		  end		  me.written = me.written + LenB(data)		  me.bs.Write data		  return true		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function WrittenData() As MemoryBlock		  return me.buffer		End Function	#tag EndMethod	#tag Property, Flags = &h1		Protected bs As BinaryStream	#tag EndProperty	#tag Property, Flags = &h1		Protected buffer As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected error As Boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected written As UInt64	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass