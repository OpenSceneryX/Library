#tag ClassProtected Class RsrcForkReaderImplements SeqDataInputStream	#tag Method, Flags = &h0		Function Read(count As Integer) As String		  #if TargetMacOS		    		    dim res, act, req as Integer		    dim mb as MemoryBlock		    		    #if TargetCarbon		      Declare Function FSRead Lib CarbonLibName (refNum as Integer, ByRef count as Integer, buffPtr as Ptr) as Integer		    #else		      Declare Function FSRead Lib "InterfaceLib" (refNum as Integer, ByRef count as Integer, buffPtr as Ptr) as Integer		    #endif		    		    // don't read if there has been an error before		    if me.errCode <> 0 then		      return ""		    end		    		    if me.refnum = 0 then		      raise new RuntimeException // did you forget to call Open()?		    end		    		    // make sure we do not read more than what's left in the file		    req = count		    if me.bytesRead + req > me.length then		      req = me.length - me.bytesRead		    end		    if req <= 0 then		      return "" // EOF -- we've reached the end of file		    end		    		    mb = NewMemoryBlock(req) // a buffer to read the data into temporarily		    if mb = nil then		      raise new OutOfMemoryException		    end		    mb.LittleEndian = false		    		    act = req		    res = FSRead(me.refnum, act, mb)		    		    if res = 0 and act <> req then		      res = -1 // something went very wrong here, maybe due to a bug in this class		    end		    		    if res < 0 then		      me.errCode = res		      return ""		    end		    		    me.bytesRead = me.bytesRead + act		    return mb.StringValue(0,act)		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function EOF() As Boolean		  return me.bytesRead >= me.length or me.refnum = 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function HadError() As Boolean		  return me.errCode <> 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Open() As Boolean		  #if TargetMacOS		    		    dim res, len, ref as Integer		    dim mb, spec as MemoryBlock		    		    Declare Function FSpOpenRF Lib CarbonLibName (spec as Ptr, permission as Integer, refNumPtr as Ptr) as Integer		    Declare Function GetEOF Lib CarbonLibName (refNum as Integer, ByRef logEOF as Integer) as Integer		    Declare Function FSClose Lib CarbonLibName (refNum as Integer) as Integer		    		    if me.refnum <> 0 then		      return true		    end		    		    me.ClearError		    me.refnum = 0		    me.length = 0		    me.bytesRead = 0		    		    #if TargetMachO and AvoidFSSpecCalls		      ... still missing ###		    #else		      spec = FSSpecOfFolderItem (me.f)		      if spec <> nil then		        mb = NewMemoryBlock(2)		        if mb = nil then		          raise new OutOfMemoryException		        end		        res = FSpOpenRF(spec, 0, mb)		        if res = 0 then		          ref = mb.Short(0)		          res = GetEOF(ref, len)		          if res = 0 then		            me.length = len		            me.refnum = ref		            return true		          end		          res = FSClose(ref)		        end		      end		    #endif		    		    me.errCode = res		    return false		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Close()		  #if TargetMacOS		    		    dim res as Integer		    		    #if TargetCarbon		      Declare Function FSClose Lib CarbonLibName (refNum as Integer) as Integer		    #else		      Declare Function FSClose Lib "InterfaceLib" (refNum as Integer) as Integer		    #endif		    		    if me.refnum <> 0 then		      res = FSClose(me.refnum) // we can quite safely ignore the result		      me.refnum = 0		    end		    		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetErrorDescription(ByRef code As Integer, ByRef msg As String)		  code = me.errCode		  if me.errCode <> 0 then		    msg = "open or read error ("+Str(me.errCode)+")"		  else		    msg = ""		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Skip(count As Integer) As Boolean		  #if TargetMacOS		    		    dim res, req as Integer		    		    #if TargetCarbon		      Declare Function SetFPos Lib CarbonLibName (refNum as Integer, posMode as Integer, posOff as Integer) as Integer		    #else		      Declare Function SetFPos Lib "InterfaceLib" (refNum as Integer, posMode as Integer, posOff as Integer) as Integer		    #endif		    		    // don't continue if there has been an error before		    if me.errCode <> 0 then		      return false		    end		    		    if me.refnum = 0 then		      raise new RuntimeException // did you forget to call Open()?		    end		    		    // make sure we do not get behind the end of file		    req = count		    if me.bytesRead + req > me.length then		      // we would be behind the EOF - seek to EOF and return as failure		      res = SetFPos(me.refnum, 1, me.length) // seeks from start of file		      me.bytesRead = me.length		      return false		    end		    		    me.bytesRead = me.bytesRead + req		    res = SetFPos(me.refnum, 1, me.bytesRead) // seeks from start of file		    		    if res < 0 then		      me.errCode = res		      return false		    end		    		    return true		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ClearError()		  me.errCode = 0		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RsrcForkReader(f as FolderItem)		  me.f = f		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ~RsrcForkReader()		  me.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function FSSpecOfFolderItem(f as FolderItem) As MemoryBlock		  #if TargetMacOS		    dim spec as new MemoryBlock(70)		    if spec = nil then		      raise new OutOfMemoryException		    end		    #if UseTTsOldPlugins		      spec.FSSpec(0) = f // uses TT's MemoryBlock Plugin (see <http://www.tempel.org/rb/>)		    #else		      // This uses a "hack" to access a public RB Plugin API function.		      // While this access procedure not officially sanctioned by RS, it works for now		      Declare function REALFSSpecFromFolderItem Lib "" (spec as Ptr, f as FolderItem) as Boolean		      if REALFSSpecFromFolderItem (spec, f) then		        return spec		      end		    #endif		  #endif		End Function	#tag EndMethod	#tag Property, Flags = &h1		Protected refnum As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected errCode As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected length As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected f As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		Protected bytesRead As Integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass