#tag ClassProtected Class RsrcForkWriterImplements SeqDataOutputStream	#tag Method, Flags = &h0		Function Write(data As String) As Boolean		  #if TargetMacOS		    		    dim res, act, req as Integer		    dim mb as MemoryBlock		    		    #if TargetCarbon		      Declare Function FSWrite Lib CarbonLibName (refNum as Integer, ByRef count as Integer, buffPtr as Ptr) as Integer		    #else		      Declare Function FSWrite Lib "InterfaceLib" (refNum as Integer, ByRef count as Integer, buffPtr as Ptr) as Integer		    #endif		    		    // don't write if there has been an error before		    if me.errCode <> 0 then		      return false		    end		    		    if me.refnum = 0 then		      raise new RuntimeException // did you forget to call Open()?		    end		    		    req = LenB(data)		    		    mb = NewMemoryBlock(req) // a temp buffer to write the data from		    if mb = nil then		      raise new OutOfMemoryException		    end		    mb.StringValue(0,req) = data		    		    act = req		    res = FSWrite(me.refnum, act, mb)		    		    if res = 0 and act <> req then		      res = -1 // something went very wrong here, maybe due to a bug in this class		    end		    		    if res < 0 then		      me.errCode = res		      return false		    end		    		    return true		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Open() As Boolean		  #if TargetMacOS		    		    dim res, len, ref as Integer		    dim mb, spec as MemoryBlock		    		    Declare Function FSpOpenRF Lib CarbonLibName (spec as Ptr, permission as Integer, refNumPtr as Ptr) as Integer		    Declare Function SetEOF Lib CarbonLibName (refNum as Integer, logEOF as Integer) as Integer		    Declare Function FSClose Lib CarbonLibName (refNum as Integer) as Integer		    		    if me.refnum <> 0 then		      return true		    end		    		    me.ClearError		    me.refnum = 0		    		    #if TargetMachO and AvoidFSSpecCalls		      ... still missing ###		    #else		      spec = FSSpecOfFolderItem (me.f)		      if spec <> nil then		        mb = NewMemoryBlock(2)		        if mb = nil then		          raise new OutOfMemoryException		        end		        res = FSpOpenRF(spec, 4, mb)		        if res = 0 then		          ref = mb.Short(0)		          mb = nil		          res = SetEOF(ref, 0)		          if res = 0 then		            me.refnum = ref		            return true		          end		          res = FSClose(ref)		        end		      end		    #endif		    		    me.errCode = res		    return false		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Close() As Boolean		  #if TargetMacOS		    		    dim res as Integer		    		    #if TargetCarbon		      Declare Function FSClose Lib CarbonLibName (refNum as Integer) as Integer		    #else		      Declare Function FSClose Lib "InterfaceLib" (refNum as Integer) as Integer		    #endif		    		    if me.refnum <> 0 then		      res = FSClose(me.refnum)		      me.refnum = 0		    end		    		    return me.errCode = 0 and res = 0		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub GetErrorDescription(ByRef code As Integer, ByRef msg As String)		  code = me.errCode		  if me.errCode <> 0 then		    msg = "open or write error"		  else		    msg = ""		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Skip(count As Integer) As Boolean		  #if TargetMacOS		    		    dim res, pos as Integer		    		    #if TargetCarbon		      Declare Function SetFPos Lib CarbonLibName (refNum as Integer, posMode as Integer, posOff as Integer) as Integer		      Declare Function GetFPos Lib CarbonLibName (refNum as Integer, ByRef filePos as Integer) as Integer		    #else		      Declare Function SetFPos Lib "InterfaceLib" (refNum as Integer, posMode as Integer, posOff as Integer) as Integer		      Declare Function GetFPos Lib "InterfaceLib" (refNum as Integer, ByRef filePos as Integer) as Integer		    #endif		    		    if me.errCode <> 0 then		      return false		    end		    		    if me.refnum = 0 then		      raise new RuntimeException // did you forget to call Open()?		    end		    		    res = GetFPos(me.refnum, pos)		    if res = 0 then		      res = SetFPos(me.refnum, 1, pos + count)		      if res = 0 then		        return true		      end		    end		    		    me.errCode = res		    return false		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(f as FolderItem)		  me.f = f		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ClearError()		  me.errCode = 0		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Flush() As Boolean		  if me.refnum = 0 then		    raise new RuntimeException // did you forget to call Open()?		  end		  return me.errCode = 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Destructor()		  if me.Close then		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function FSSpecOfFolderItem(f as FolderItem) As MemoryBlock		  #if TargetMacOS		    dim spec as new MemoryBlock(70)		    if spec = nil then		      raise new OutOfMemoryException		    end		    #if UseTTsOldPlugins		      spec.FSSpec(0) = f // uses TT's MemoryBlock Plugin (see <http://www.tempel.org/rb/>)		    #else		      // This uses a "hack" to access a public RB Plugin API function.		      // While this access procedure not officially sanctioned by RS, it works for now		      Declare function REALFSSpecFromFolderItem Lib "" (spec as Ptr, f as FolderItem) as Boolean		      if REALFSSpecFromFolderItem (spec, f) then		        return spec		      end		    #endif		  #endif		End Function	#tag EndMethod	#tag Property, Flags = &h1		Protected errCode As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected refnum As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected f As FolderItem	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass