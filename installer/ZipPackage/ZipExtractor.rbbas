#tag ClassProtected Class ZipExtractor	#tag Method, Flags = &h0		Function ExtractAllSilently(zipFile as FolderItem, destFolder as FolderItem) As Boolean		  dim e as ZipEntry		  dim i as Integer		  dim ok, nameOverflow as Boolean		  dim totalBytes as Double		  dim f as FolderItem		  dim zar as ZipArchive		  		  me.p_errMsg = ""		  		  zar = new ZipArchive		  if not zar.Open(zipFile, false) then		    me.p_errMsg = zar.ErrorMessage		  else		    		    //		    // Calculate the sum of all bytes of all files to extract		    //		    		    totalBytes = 0		    for i = 1 to zar.EntryCount		      e = zar.Entry(i)		      totalBytes = totalBytes + e.Size		    next		    me.p_totalBytes = totalBytes		    		    //		    // Now extract all items into that folder		    //		    		    for i = 1 to zar.EntryCount		      e = zar.Entry(i)		      		      // optional check to support older or incorrectly created MacBinary headers:		      'if me.decodeMacBinary and Right(e.RawPath(),4) = ".bin" then		      'e.EnableMacBinary1Detection(true)		      'end		      		      f = e.MakeDestination(destFolder,false)		      if not e.Extract(f, true) then		        me.p_errMsg = "Extraction of """+e.RawPath+""" failed: "+e.ErrorMessage		        exit		      elseif TargetMacOS and Len(f.Name) <> Len(f.DisplayName) then		        // Note: I (TT) am not 100% sure that the above test is always detecting		        // an overflow when having non-ASCII chars in file names.		        nameOverflow = true		      end		    next		    		    //		    // Close the archive (not really necessary, though)		    //		    		    ok = zar.Close		    		    if nameOverflow then		      me.p_hadNameOverflow = true		      'me.p_errMsg = "One or more extracted files may have truncated names because they were longer than 31 bytes"		    end		    		  end		  		  zar = nil		  		  return me.p_errMsg = ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetComment(zipFile as FolderItem) As String		  dim ok as Boolean		  dim zar as ZipArchive		  dim comm as String		  		  me.p_errMsg = ""		  		  zar = new ZipArchive		  if not zar.Open(zipFile, false) then		    me.p_errMsg = zar.ErrorMessage		  else		    comm = zar.Comment		    ok = zar.Close		  end		  zar = nil		  return comm		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsZipArchive(file as FolderItem) As Boolean		  dim ok as Boolean		  dim zar as ZipArchive		  		  me.p_errMsg = ""		  		  zar = new ZipArchive		  if not zar.Open(file, false) then		    me.p_errMsg = zar.ErrorMessage		  else		    ok = zar.Close		  end		  zar = nil		  return ok		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function LastErrMsg() As String		  return p_errMsg		End Function	#tag EndMethod	#tag Note, Name = About				You can use the methods in this optional class to easily extract all files from		an archive, get its comment and check if a file is a Zip archive at all.					#tag EndNote	#tag Property, Flags = &h1		Protected p_totalBytes As Double	#tag EndProperty	#tag Property, Flags = &h1		Protected p_errMsg As String	#tag EndProperty	#tag Property, Flags = &h1		Protected p_hadNameOverflow As Boolean	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass